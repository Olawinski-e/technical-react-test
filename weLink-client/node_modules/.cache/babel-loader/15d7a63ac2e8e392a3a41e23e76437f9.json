{"ast":null,"code":"import _classCallCheck from \"/home/bast/code/help/technical-react-test/weLink-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bast/code/help/technical-react-test/weLink-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bast/code/help/technical-react-test/weLink-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bast/code/help/technical-react-test/weLink-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bast/code/help/technical-react-test/weLink-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bast/code/help/technical-react-test/weLink-client/src/components/PageNav.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./PageNav.css\"; // PageNav is placed as a footer on the page. It displays a series of buttons for each\n// page of the current selection\n\nvar PageNav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageNav, _Component);\n\n  function PageNav() {\n    _classCallCheck(this, PageNav);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PageNav).apply(this, arguments));\n  }\n\n  _createClass(PageNav, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // (1) we want to know how many pages we need to have\n      var contactArray = this.props.selection; // We know we want 9 contacts per page, pageFloor is the amount of 'full pages' \n      // we need. There might be another page with less than 9 contacts in it, see \n      // line 28-.37 Could be interesting to see if it works with '9' not hardcoded ^^\n\n      var pageFloor = Math.floor(contactArray.length / 9); // (2) here we store the indices of the first contact for each page\n\n      var pageStart = [];\n\n      for (var i = 0; i < pageFloor; i++) {\n        pageStart.push(i * 9);\n      } // (3) pageEnd is the same array except we need to add 9 indices to each element\n\n\n      var pageEnd = pageStart.map(function (oneIndex) {\n        return oneIndex + 9;\n      }); // (4) here we take care of the selection elements that are in the last page\n      // if the selection's length is not a multiple of 9\n\n      if (contactArray.length % 9 !== 0) {\n        // (4a) the first contact to display in this last page is rather easy to define\n        pageStart.push(pageFloor * 9); // (4b) he last contact is the same index as above PLUS what remains of the \n        // selection's length when divided by 9 \n\n        pageEnd.push(pageFloor * 9 + contactArray.length % 9);\n      } // (5) this array tells how many page buttons there are and the values (page numbers) \n      // that are displayed in said buttons\n\n\n      var pageButtons = []; // we populate it\n\n      for (var i = 1; i <= pageStart.length; i++) {\n        pageButtons.push(i);\n      }\n\n      return React.createElement(\"footer\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"searchheader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, pageButtons.map(function (oneButton, index) {\n        return (// (6) Now each page button will pass the indices of the first and last \n          // contacts we want to see on their pages remember that pageButtons\n          // pageStart and pageEnd have the same length, all three sort of constitute \n          // a table. These indices are passed to a method that is passed from the \n          // parent (genericSlicer() from App.js) as a prop. See App.js.\n          React.createElement(Link, {\n            onClick: function onClick(event) {\n              return _this.props.onPage(event, pageStart[index], pageEnd[index]);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, oneButton) // Maybe there is a nicer way to accomplish this, for instance\n          // pageButtons could be an array of objects { pageStart, pageEnd }\n\n        );\n      })))));\n    }\n  }]);\n\n  return PageNav;\n}(Component);\n\nexport default PageNav;","map":{"version":3,"sources":["/home/bast/code/help/technical-react-test/weLink-client/src/components/PageNav.js"],"names":["React","Component","Link","PageNav","contactArray","props","selection","pageFloor","Math","floor","length","pageStart","i","push","pageEnd","map","oneIndex","pageButtons","oneButton","index","event","onPage"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAO,eAAP,C,CAEA;AACA;;IACMC,O;;;;;;;;;;;;;6BAGK;AAAA;;AACP;AACA,UAAMC,YAAY,GAAG,KAAKC,KAAL,CAAWC,SAAhC,CAFO,CAGP;AACA;AACA;;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACM,MAAb,GAAsB,CAAjC,CAAhB,CANO,CAOP;;AACA,UAAIC,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAApB,EAA+BK,CAAC,EAAhC,EAAoC;AAClCD,QAAAA,SAAS,CAACE,IAAV,CAAeD,CAAC,GAAC,CAAjB;AACD,OAXM,CAYP;;;AACA,UAAIE,OAAO,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ,EAAI;AACtC,eAAOA,QAAQ,GAAG,CAAlB;AACD,OAFa,CAAd,CAbO,CAiBP;AACA;;AACA,UAAIZ,YAAY,CAACM,MAAb,GAAsB,CAAtB,KAA4B,CAAhC,EAAmC;AACnC;AACEC,QAAAA,SAAS,CAACE,IAAV,CAAeN,SAAS,GAAC,CAAzB,EAFiC,CAGnC;AACA;;AACEO,QAAAA,OAAO,CAACD,IAAR,CAAcN,SAAS,GAAC,CAAX,GAAiBH,YAAY,CAACM,MAAb,GAAsB,CAApD;AACD,OAzBM,CA2BP;AACA;;;AACA,UAAIO,WAAW,GAAG,EAAlB,CA7BO,CA8BP;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,SAAS,CAACD,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AAC1CK,QAAAA,WAAW,CAACJ,IAAZ,CAAiBD,CAAjB;AACD;;AAID,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCK,WAAW,CAACF,GAAZ,CAAgB,UAACG,SAAD,EAAYC,KAAZ,EAAsB;AACrC,eACE;AACA;AACA;AACA;AACA;AACA,8BAAC,IAAD;AAAM,YAAA,OAAO,EAAE,iBAAAC,KAAK;AAAA,qBAAI,KAAI,CAACf,KAAL,CAAWgB,MAAX,CAAkBD,KAAlB,EAAyBT,SAAS,CAACQ,KAAD,CAAlC,EAA2CL,OAAO,CAACK,KAAD,CAAlD,CAAJ;AAAA,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsFD,SAAtF,CANF,CAOE;AACA;;AARF;AAUD,OAXA,CADD,CADF,CADF,CADF,CADF;AAsBD;;;;EA9DmBjB,S;;AAiEtB,eAAeE,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./PageNav.css\";\n\n// PageNav is placed as a footer on the page. It displays a series of buttons for each\n// page of the current selection\nclass PageNav extends Component {\n\n\n  render() {\n    // (1) we want to know how many pages we need to have\n    const contactArray = this.props.selection;\n    // We know we want 9 contacts per page, pageFloor is the amount of 'full pages' \n    // we need. There might be another page with less than 9 contacts in it, see \n    // line 28-.37 Could be interesting to see if it works with '9' not hardcoded ^^\n    var pageFloor = Math.floor(contactArray.length / 9); \n    // (2) here we store the indices of the first contact for each page\n    var pageStart = [];\n    for (var i = 0; i < pageFloor; i++) {\n      pageStart.push(i*9);\n    }\n    // (3) pageEnd is the same array except we need to add 9 indices to each element\n    var pageEnd = pageStart.map(oneIndex => {\n      return oneIndex + 9\n    })\n\n    // (4) here we take care of the selection elements that are in the last page\n    // if the selection's length is not a multiple of 9\n    if (contactArray.length % 9 !== 0) {\n    // (4a) the first contact to display in this last page is rather easy to define\n      pageStart.push(pageFloor*9);\n    // (4b) he last contact is the same index as above PLUS what remains of the \n    // selection's length when divided by 9 \n      pageEnd.push((pageFloor*9) + (contactArray.length % 9));\n    }\n\n    // (5) this array tells how many page buttons there are and the values (page numbers) \n    // that are displayed in said buttons\n    var pageButtons = [];\n    // we populate it\n    for (var i = 1; i <= pageStart.length; i++) {\n      pageButtons.push(i);\n    } \n\n    \n\n    return (\n      <footer>\n        <nav className=\"header\">\n          <div className=\"menu-container\">\n            <div className=\"searchheader\">\n            {pageButtons.map((oneButton, index) => {\n              return (\n                // (6) Now each page button will pass the indices of the first and last \n                // contacts we want to see on their pages remember that pageButtons\n                // pageStart and pageEnd have the same length, all three sort of constitute \n                // a table. These indices are passed to a method that is passed from the \n                // parent (genericSlicer() from App.js) as a prop. See App.js.\n                <Link onClick={event => this.props.onPage(event, pageStart[index], pageEnd[index])} >{oneButton}</Link>\n                // Maybe there is a nicer way to accomplish this, for instance\n                // pageButtons could be an array of objects { pageStart, pageEnd }\n              );\n            })}\n            </div>\n          </div>\n        </nav>\n      </footer>\n    );\n  }\n}\n\nexport default PageNav;\n"]},"metadata":{},"sourceType":"module"}